version: 2.1

commands:
  destroy-environment:
    description: Destory backend / frontend cloudformation  & s3 bucket on fail
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destory environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >> --region us-east-1
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >> --region us-east-1
           # aws s3 rm s3://udapeople-<< parameters.workflow_id >> --recursive --region us-east-1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id: 
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=1
            #SUCCESS=$(curl --insecure  https://kvdb.io/NQPRJiBSzdTi7ntfUHNfwz/migration_<< parameters.workflow_id >>)
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              # Add revert code here. You can find this in the Getting Started section.
              npm run migrations:revert
            fi

node-docker-image: &node-docker-image
   docker:
      - image: circleci/node:13.8.0

aws-docker-image: &aws-docker-image
   docker:
      - image: cimg/aws:2023.01

ansible-docker-image: &ansible-docker-image
   docker:
      - image: cimg/deploy:2022.11.1

jobs:
  build-frontend:
    <<: *node-docker-image
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      #      exit 1
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    <<: *node-docker-image
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      #      exit 1
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  
  test-frontend:
    <<: *node-docker-image
    steps:
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run frontend test
          command: |
            cd frontend
            npm install
            npm run test

  test-backend:
    <<: *node-docker-image
    steps:
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend test
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    <<: *node-docker-image
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: scan frontend
          command: |
            cd frontend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
          #  npm audit --audit-level=critical

  scan-backend:
    <<: *node-docker-image
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: scan backend
          command: |
            cd backend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
          #  npm audit --audit-level=critical

  deploy-infrastructure:
    <<: *aws-docker-image
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --region us-east-1
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --region us-east-1 
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Query EC2 instances in the backend using the workflowID and export the IP address to ansible/inventory
            aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query "Reservations[*].Instances[*].PublicDnsName" \
              --region us-east-1 \
              --output text >> .circleci/ansible/inventory.txt
            echo `cat .circleci/ansible/inventory.txt`
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  configure-infrastructure:
    <<: *ansible-docker-image
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: 
            - "df:d4:27:43:6f:dc:01:ea:99:ec:ab:03:34:a3:60:38"
      - attach_workspace:      # attach workspace
          at: ~/
      # - run:
      #     name: Install dependencies
      #     command: |
      #       # Your code here
      #       exit 1
      - run:
          name: Configure server
          command: |
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}   

  run-migrations:
    <<: *node-docker-image
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: 
          name: update apt-get
          command: |
            sudo apt-get update
      - run: 
          name: update awscli
          command: |
            sudo apt-get install awscli
      - run:
          name: Run migrations
          command: |
            cd ~/project/backend
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to kvdb.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                echo "success"
                # If you are using kvdb.io, generate the bucket ID "9GE4jRtKznmVKRfvdBABBe" in your local terminal first
                curl --insecure https://kvdb.io/NQPRJiBSzdTi7ntfUHNfwz/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      # - destroy-environment:
      #     workflow_id: ${CIRCLE_WORKFLOW_ID:0:7} 

  deploy-frontend:
    <<: *aws-docker-image
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: echo circle_workflow_id
          command: |
            echo ${CIRCLE_WORKFLOW_ID}
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --region=us-east-1 \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo "The backend IP is $BACKEND_IP"
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> ~/project/frontend/.env
            cat ~/project/frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd ~/project/frontend
            export NODE_OPTIONS=--openssl-legacy-provider
            npm run build
      - run:
          name: tar frontend
          command:
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz ~/project/frontend/dist
      - run:
          name: aws s3 copy
          command:
            aws s3 cp ~/project/frontend/dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # - destroy-environment:
      ##     workflow_id: ${CIRCLE_WORKFLOW_ID:0:7} 

  deploy-backend:
    <<: *node-docker-image
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: 
            - "df:d4:27:43:6f:dc:01:ea:99:ec:ab:03:34:a3:60:38"
      - attach_workspace:
          at: ~/
      - run:
          name: Run Install dependencies
          command: |
            sudo apt-get update
            sudo apt install python3 -y
            sudo apt-get install ansible -y
            sudo apt install nodejs
      - run:
          name: npm cmds backend
          command: |
            cd backend
            npm install
            npm run build
      - run:
          name: Zip backend
          command: |
            # Zip the directory
            tar -zcvf artifact.tar.gz ~/project/backend
            cp ~/project/artifact.tar.gz ~/project/.circleci/ansible/roles/deploy/artifact.tar.gz
            ls ~/project/.circleci/ansible/roles/deploy/
      - run:
          name: Deploy backend
          command: |
            cd ~/project/.circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/deploy-backend.yml
      # - destroy-environment:
      #     workflow_id: ${CIRCLE_WORKFLOW_ID:0:7} 
      # - revert-migrations:
      #     workflow_id: ${CIRCLE_WORKFLOW_ID:0:7} 
                    

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          # filters:
          #   branches:
          #     only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
