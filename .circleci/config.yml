version: 2.1

commands:
  destroy-environment:
    description: Destory backend / frontend cloudformation  & s3 bucket on fail
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destory environments
          when: on_fail
          command: |
            aws cloudformation delete-stack udapeople-backend-<< parameters.workflow_id >>
            aws cloudformation delete-stack udapeople-frontend-<< parameters.workflow_id >>
            aws s3 rm s3://udapeople-<< parameters.workflow_id >> --recursive

node-docker-image: &node-docker-image
   docker:
      - image: circleci/node:13.8.0

aws-docker-image: &aws-docker-image
   docker:
      - image: cimg/aws:2023.01

ansible-docker-image: &ansible-docker-image
   docker:
      - image: cimg/deploy:2022.11.1

jobs:
  build-frontend:
    <<: *node-docker-image
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      #      exit 1
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    <<: *node-docker-image
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      #      exit 1
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  
  test-frontend:
    <<: *node-docker-image
    steps:
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run frontend test
          command: |
            cd frontend
            npm install
            npm run test

  test-backend:
    <<: *node-docker-image
    steps:
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend test
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    <<: *node-docker-image
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: scan frontend
          command: |
            cd frontend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
          #  npm audit --audit-level=critical

  scan-backend:
    <<: *node-docker-image
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: scan backend
          command: |
            cd backend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
          #  npm audit --audit-level=critical

  deploy-infrastructure:
    <<: *aws-docker-image
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags udapeople \
              --stack-name "udapeople-backend-${CIRCLE-WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE-WORKFLOW_ID:0:7}" 
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE-WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE-WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Query EC2 instances in the backend using the workflowID and export the IP address to ansible/inventory
            aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE-WORKFLOW_ID:0:7}" \
              --query "Reservations[*].Instances[*].PublicDnsName" \
              --output text >> .circleci/ansible/inventory.txt
            echo `cat .circleci/ansible/inventory.txt`
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}


workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
